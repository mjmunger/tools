<?php
/**
 * {CLASS SUMMARY}
 *
 * Date: 10/13/18
 * Time: 4:41 PM
 * @author Michael Munger <mj@hph.io>
 */

namespace hphio\tools;


use League\Container\Container;
use \PDO;
use \PDOStatement;

class Abstractor
{

    protected $pdo               = null;
    public    $primaryKey        = null;
    public    $timestamps        = [];
    public    $targetTable       = null;
    public    $updateTimestamps  = [];
    public    $namespace         = '';
    public    $filename          = null;
    public    $classname         = null;
    public    $longestField      = null;
    public    $fields            = [];

    /**
     * Abstractor constructor.
     * @param $pdo
     */
    public function __construct(Container $container)
    {
        $this->container = $container;
        $this->pdo = $container->get("pdo");
        $this->hash = sha1(microtime());
    }

    public function databaseError($stmt) {
        throw new \Exception(sprintf("Database error (%s) %s", $stmt->errorCode(), $stmt->errorInfo()[2]) );
    }

    public function prepareExecute($sql, $values) {
        $stmt = $this->pdo->prepare($sql);
        $result = $stmt->execute($values);

        if($stmt->errorCode() !== '00000') $this->databaseError($stmt);

        return $stmt;
    }

    public function setTable($table) {
        $this->targetTable = $table;
    }

    private function getTableDescription() {
        $sql = "DESCRIBE " . $this->targetTable;
        $stmt = $this->prepareExecute($sql , []);

        return $stmt->fetchAll(PDO::FETCH_ASSOC);

    }
    public function getPrimaryKey() {
        $data = $this->getTableDescription();

        foreach($data as $row) {
            if($row['Key'] == 'PRI') {
                $this->primaryKey = $row['Field'];
                return $this->primaryKey;
            }
        }

        return false;
    }

    public function getTimestamps() {
        $data = $this->getTableDescription();
        foreach($data as $row) {
            if($row['Default'] == 'CURRENT_TIMESTAMP') $this->timestamps[] = $row['Field'];
        }
    }

    public function getOnUpdateTimestamps() {
        $data = $this->getTableDescription();
        foreach($data as $row) {
            if($row['Type']  !== 'datetime') continue;
            if($row['Extra'] === 'on update CURRENT_TIMESTAMP') $this->updateTimestamps[] = $row['Field'];
        }
    }
    public function abstractTable($table) {
        $sql = "";
    }

    public function setNamespace($namespace) {
        $this->namespace = $namespace;
    }

    public function setClassName($classname) {
        $classname = ucfirst($classname);
        $this->classname = $classname;
        $this->filename = "$classname.php";
    }

    public function getOpeningMarker() {
        $format = '    /* <generated_%s> */';
        return sprintf($format, $this->hash);
    }

    public function getClosingMarker() {
        $format = '    /* </generated_%s> */';
        return sprintf($format, $this->hash);
    }

    public function discoverFields() {
        $data = $this->getTableDescription();

        foreach($data as $row) {
            $field = $row['Field'];

            if(strlen($field) > strlen($this->longestField)) $this->longestField = $field;

            $this->fields[] = $field;
        }
    }

    public function fieldPaddingLength() {
        return strlen($this->longestField) + 1;
    }

    private function phpHeader($body) {
        $body[] = "<?php";
        $body[] = '';
        return $body;
    }

    private function writeComments($body) {

        $body[] = '/**';
        $body[] = sprintf(' * Abstraction of the %s table', $this->targetTable);
        $body[] = ' * Generated by Abstractor from hphio\util';
        $body[] = ' */';
        $body[] = '';
        return $body;
    }

    private function writeNamespace($body) {
        if(is_null($this->namespace)) return;

        $body[] = sprintf("namespace %s;", $this->namespace);
        $body[] = '';
        $body[] = '';
        return $body;
    }

    private function writeClassSignature($body) {
        $body[] = sprintf("class %s", $this->classname);
        $body[] = "{";
        return $body;
    }

    private function writeGeneratedHeader($body) {
        $body[] = '';
        $body[] = $this->getOpeningMarker();
        $body[] = '';
        return $body;
    }

    private function writeDatabaseFields($body) {
        $body[] = "    /* <database fields> */";
        $body[] = '';

        foreach($this->fields as $field) {
            $body[] = sprintf("    public $%s= null;", str_pad($field, $this->fieldPaddingLength()));
        }
        $body[] = '';
        $body[] = "    /* </database fields> */";
        $body[] = '';
        return $body;
    }

    private function writeGetMyValues($body) {

        $body[] = '    /**';
        $body[] = '     * Returns an associative array of values for this class.';
        $body[] = '     * @return array';
        $body[] = '     */';
        $body[] = '';
        $body[] = '    public function getMyValues() : array {';

        $opening = '        return [ %s=> $this->%s';
        $middle  = '               , %s=> $this->%s';

        for($x = 0; $x < count($this->fields); $x++) {
            $field = $this->fields[$x];
            $format = ($x == 0 ? $opening : $middle );
            $body[] = sprintf(
                $format,
                //Add 2 to fieldPaddingLengtht o accomodate the '"' in the line.
                str_pad('"' . $field . '"', $this->fieldPaddingLength() +2 ),
                $field);
        }

        $body[] = "               ];";
        $body[] = "    }";
        $body[] = '';

        return $body;
    }

    public function writeInsert($body) {
        $body[] = '    public function insert() {';
        $body[] = sprintf('        $sql = " INSERT INTO `%s`', $this->targetTable);

        $opening = "                (  `%s`";
        $middle  = "                , `%s`";

        $fields = [];

        for($x = 0; $x < count($this->fields); $x++) {
            if($this->fields[$x] == $this->primaryKey) continue;
            $fields[]  = $this->fields[$x];
        }

        for($x = 0; $x < count($fields); $x++) {
            $field = $fields[$x];

            //Primary keys should not be in an insert so that autoincremenet can do its job.
            if($field === $this->primaryKey) continue;

            $format = ($x == 0 ? $opening : $middle );
            $body[] = sprintf($format, $field);
        }

        $body[] = '                )'. '';
        $body[] = '                VALUES'. '';

        $opening = '                ( :%s';
        $middle  = '                , :%s';

        for($x = 0; $x < count($fields); $x++) {
            $field = $fields[$x];
            $format = ($x == 0 ? $opening : $middle );
            $body[] = sprintf($format, $field);
        }

        $body[] = '                )";';

        $body[] = '        $values = $this->getMyValues();'. '';
        $body[] = sprintf('        unset($values[\'%s\']);', $this->primaryKey);
        $body[] = '';
        $body[] = '        $this->prepareExecute($sql, $values);';
        $body[] = '';
        $body[] = sprintf('        $this->%s = $this->pdo->lastinsertid();', $this->primaryKey);
        $body[] = sprintf('        return $this->%s;', $this->primaryKey);
        $body[] = '';
        $body[] = '    }'. '';
        $body[] = '';

        return $body;
    }

    private function writeUpdate($body) {
        $body[] = '    public function update() {';
        $body[] = sprintf('        $sql = "UPDATE `%s`', $this->targetTable);
        $body[] = '                SET';

        $fields = $this->fields;

        //Remove the primary key and auto-update fields.
        $fields = array_diff($fields, $this->timestamps, $this->updateTimestamps, [ $this->primaryKey ]);

        $buffer = [];
        foreach($fields as $field) {
            $buffer[] = $field;
        }

        $fields = $buffer;

        foreach($fields as $field) {
            $body[] = sprintf('                `%s` = :%s,', $field, $field);
        }

        $body[] = sprintf('                WHERE `%s` = :%s', $this->primaryKey, $this->primaryKey);
        $body[] = '                LIMIT 1";';
        $body[] = '';
        $body[] = '        $values = $this->getMyValues();';

        $timestamps = array_unique(array_merge($this->timestamps, $this->updateTimestamps));

        foreach($timestamps as $field) {
            $body[] = sprintf('        unset($values[\'%s\']);', $field);
        }

        $body[] = '        $this->prepareExecute($sql, $values);';
        $body[] = '    }';

        return $body;
    }

    private function writeClosing($body) {
        $body[] = '';
        $body[] = $this->getClosingMarker();
        $body[] = '}';
        $body[] = '';

        return $body;
    }

    public function getBody() {
        $body = [];
        $body = $this->phpHeader($body);
        $body = $this->writeComments($body);
        $body = $this->writeNamespace($body);
        $body = $this->writeClassSignature($body);
        $body = $this->writeGeneratedHeader($body);
        $body = $this->writeDatabaseFields($body);
        $body = $this->writeGetMyValues($body);
        $body = $this->writeInsert($body);
        $body = $this->writeUpdate($body);
        $body = $this->writeClosing($body);

        return $body;
    }
}
